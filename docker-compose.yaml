services:
  api:
    build:
      dockerfile: Dockerfile
      context: .
      target: api
    env_file:
      - .env
    volumes:
      - .:/opt/app
    ports:
      - "8080:80"
    depends_on:
      db:
        condition: service_healthy
      localstack:
        condition: service_healthy

  db:
    image: mysql:8.0
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: learn_sqs
    ports:
      - '127.0.0.1:3306:3306/tcp'
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 5s
      timeout: 30s
      retries: 20

  migrate:
    build:
      dockerfile: Dockerfile
      context: .
      target: migrate
    env_file:
      - .env
    volumes:
      - .:/opt/app
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - extra

  build_lambda:
    image: golang:1.22
    build:
      target: lambda
    working_dir: /opt/app
    platform: linux/x86_64
    env_file:
      - .env
    volumes:
      - .:/opt/app
      - ./files:/opt/app/files
    command: sh -c 'go build -o files/bootstrap app/cmd/lambda/main.go && zip -rj files/lambda.zip files/bootstrap'

  localstack:
    image: localstack/localstack
    ports:
      - "127.0.0.1:4566:4566"
      - "127.0.0.1:4574:4574"
    environment:
      - SERVICES=sqs,lambda # Write the AWS services you want to use, separated by commas
      - DEBUG=${DEBUG:-0}
    volumes:
      - ./files:/opt/files
      - ./tools/localstack/init/ready.d/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      build_lambda:
        condition: service_completed_successfully
    command: chmod +x /etc/localstack/init/ready.d/init-aws.sh

volumes:
  mysql_data:
    driver: local
